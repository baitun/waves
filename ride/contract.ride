{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let maxAuctionDuration = 1440 * 30 
let revealDuration = 1440 * 7
# ~ 30 days

func hashString(data: String) = {
    let result = toBase64String(sha256(toBytes(data)))
    result
}

func addToList(list: String, whatToAdd: String) = {
    let result = list + " " + whatToAdd

    result
}

func removeFromList(list: String, whatToRemove: String) = {
    let idx = list.indexOf(whatToRemove)

    let result = if (isDefined(idx)) 
        then take(list, value(idx)) + takeRight(list, value(idx) + size(whatToRemove))
        else list
    result
}


@Callable(i)
func startAuction(duration: Int, startPrice: Int, priceAssetId:String, deposit: Int) = {
    

    let auctionId = toBase58String(i.transactionId)
    let revealStart = lastBlock.height + duration
    let closingStart = revealStart + revealDuration
    let organizer = i.caller.bytes.toBase58String()

    let organizerKey = organizer + "_organizer"
    let maybeOrganizerList = getString(this, organizerKey)
    let organizerList = if (isDefined(maybeOrganizerList)) then value(maybeOrganizerList) else ""
    let newOrganizerList = organizerList + " " + auctionId

    let pmt = extract(i.payment)
    
    if (duration > maxAuctionDuration) then throw("Duration is too long. Must be less than " + toString(maxAuctionDuration))
    else if (!isDefined(pmt.assetId)) then throw("Payment currency should not be in WAVES") 
    else if (pmt.amount != 1) then throw("Payment amount should be only one NFT") 
    else if (startPrice <= 0) then throw("Start price should be > 0") 
    else if (startPrice >= deposit) then throw("Start price should be < deposit (" + toString(deposit) + ")") 
    else if (duration <= 0) then throw("Duration should be > 0") 
    else
    WriteSet( 
            [   DataEntry(auctionId + "_reveal_start", revealStart),
                DataEntry(auctionId + "_closing_start", closingStart),
                DataEntry(auctionId + "_deposit", deposit),
                DataEntry(auctionId + "_unrevealed_count", 0),
                DataEntry(auctionId + "_top_price", 0),
                DataEntry(auctionId + "_second_price", 0),
                DataEntry(auctionId + "_settle", false),
                DataEntry(auctionId + "_organizer", organizer), 
                DataEntry(auctionId + "_lot_assetId", if (isDefined(pmt.assetId)) then toBase58String(value(pmt.assetId)) else "WAVES"),
                DataEntry(auctionId + "_lot_amount", pmt.amount), 
                DataEntry(auctionId + "_startPrice", startPrice), 
                DataEntry(auctionId + "_priceAssetId", priceAssetId),
                DataEntry(organizerKey, newOrganizerList),
                DataEntry("test", hashString("123" + toString(startPrice)))

            ])
} 

@Callable(i)
func bid(auctionId: String, hashBidAmount: String) = {

    let pmt = extract(i.payment)
    let pmtAssetIdStr = if (isDefined(pmt.assetId)) then toBase58String(value(pmt.assetId)) else "WAVES"
    let callerAddressStr = i.caller.bytes.toBase58String()

    let endHeight = getIntegerValue(this, auctionId + "_reveal_start")
    let startPrice = getIntegerValue(this, auctionId + "_startPrice")
    let priceAssetId = getStringValue(this, auctionId + "_priceAssetId")
    let organizer = getStringValue(this, auctionId + "_organizer")
    # let winAmount = getInteger(this, auctionId + "_winAmount")
    # let winner = getString(this, auctionId + "_winner")
    let deposit = getIntegerValue(this, auctionId + "_deposit")
    let unrevealedCount = getIntegerValue(this, auctionId + "_unrevealed_count")
    let bidder = getString(this, callerAddressStr + "_bidder")


    let bidFromTheSameUser = isDefined(getString(this, auctionId + callerAddressStr + "bid_hash"))

    if (lastBlock.height >= endHeight) then throw("Auction already finished") 
    else if (!bidFromTheSameUser && priceAssetId != pmtAssetIdStr) then throw("Bid must be in asset '" + priceAssetId + "'") 
    else if (!isDefined(organizer)) then throw("Organizer should be defined") 
    else if (!bidFromTheSameUser && pmt.amount != deposit) then throw("Payment should be equel to deposit") else {


        let inc = if (bidFromTheSameUser) then 0 else 1
    
        WriteSet(
        [
            DataEntry(auctionId + callerAddressStr + "_revealed", false),
            DataEntry(auctionId + callerAddressStr + "_bid_hash", hashBidAmount),
            DataEntry(auctionId + callerAddressStr + "_settle", false),
            DataEntry(auctionId + "_unrevealed_cont", unrevealedCount +  inc),
            DataEntry(callerAddressStr + "_bidder", {if (isDefined(bidder)) then value(bidder) else ""} + " " + auctionId)
         ]
    )
    }


}

@Callable(i)
func reveal(auctionId: String, bidAmount: Int, salt: String) = {
    let callerAddressStr = i.caller.bytes.toBase58String()



    let organizer = getStringValue(this, auctionId + "_organizer")
    let bidHash = getStringValue(this, auctionId + callerAddressStr + "_bid_hash")
    let revealed = getBooleanValue(this, auctionId + callerAddressStr + "_revealed")
    let revealStart = getIntegerValue(this, auctionId + "_reveal_start")
    let closingStart = getIntegerValue(this, auctionId + "_closing_start")
    let topPrice = getIntegerValue(this, auctionId + "_top_price")
    let secondPrice = getIntegerValue(this, auctionId + "_second_price")
    let winner = getString(this, auctionId + "_winner")
    let unrevealedCount = getIntegerValue(this, auctionId + "_unrevealed_count")

    let bidAmountAsStr = toString(bidAmount)
    let stringToHash = salt + bidAmountAsStr
    let hash = hashString(stringToHash)

    if (!isDefined(organizer)) 
        then throw("Organizer is not defined")

    else if (!isDefined(bidHash)) 
        then throw("Bid is not defined")

    else if (lastBlock.height < revealStart || lastBlock.height > closingStart) 
        then throw("Auction should be revealed between reveal (" + toString(revealStart) + ") and closing (" + toString(closingStart) + ") time, now is " + toString(lastBlock.height))

    else if (isDefined(i.payment)) 
        then throw("Payment shoud not exist")

    else if (hash != bidHash) 
        then throw("Bid hash from bidMount and sault is not equel with hash from the caller bid")

    else if (revealed == true) then throw("The bid has been already revealed") else {
        
        let topPrice2 = if (bidAmount > topPrice) then bidAmount else topPrice
        let secondPrice2 = if (bidAmount > topPrice) then topPrice else if (bidAmount > secondPrice) then bidAmount else secondPrice
        let winner2 = if (bidAmount > topPrice) then callerAddressStr else value(winner)

        WriteSet([
            DataEntry(auctionId + "_top_price", topPrice2),
            DataEntry(auctionId + "_second_price", secondPrice2),
            DataEntry(auctionId + "_winner", winner2),
            DataEntry(auctionId + callerAddressStr + "_revealed", true),
            DataEntry(auctionId + "_unrevealed_cont", unrevealedCount - 1)
        ])
    }
   
}
@Callable(i)
func withdraw(auctionId: String) = {
    let pmt = i.payment    
    let callerAddressStr = i.caller.bytes.toBase58String()

    let closingStart = getIntegerValue(this, auctionId + "_closing_start")
    let unrevealedCount = getIntegerValue(this, auctionId + "_unrevealed_count")
    let organizer = getStringValue(this, auctionId + "_organizer")
    let revealTime = getIntegerValue(this, auctionId + "_reveal_start")
    let winner = getString(this, auctionId + "_winner")
    let lotAssetId = getStringValue(this, auctionId + "_lot_assetId")
    let lotAmount = getIntegerValue(this, auctionId + "_lot_amount")
    let priceAssetId = getStringValue(this, auctionId + "_priceAssetId")
    let settle = getBooleanValue(this, auctionId + "_settle")
    let secondPrice = getIntegerValue(this, auctionId + "_second_price")
    let deposit = getIntegerValue(this, auctionId + "_deposit")

    
    let lotAsset = if (lotAssetId == "WAVES") then unit else fromBase58String(lotAssetId)
    let priceAsset = if (priceAssetId == "WAVES" || priceAssetId == "") then unit else fromBase58String(priceAssetId)

    if (isDefined(pmt) ) then throw("Payment shoud not exist") else
    if (!isDefined(organizer)) then throw("Organizer shoud exist") else
    if (revealTime - lastBlock.height < closingStart && unrevealedCount != 0) then throw("Its too early to withdraw")  else 
    {
        if (callerAddressStr == organizer || callerAddressStr == winner) then {
            if (settle == true) then throw("Illegal state, settle shoould be false") else {
                if (!isDefined(winner)) then {
                    if (isDefined(getString(this, auctionId + "_lot_passed")))  then
                        throw("Organizer has already got his lot back")
                    else {
                            let organizerAddr = addressFromStringValue(value(organizer))
                        ScriptResult(
                            WriteSet([
                                DataEntry(auctionId + "_settle", true),
                                DataEntry(organizer + "_organizer", removeFromList(getStringValue(this, organizer + "_organizer"), auctionId))
                            ]), # без bidderId?

                            TransferSet([ScriptTransfer(organizerAddr, lotAmount, lotAsset)]))
                }
                } else {
                    let winnerAddr = addressFromStringValue(value(winner))
                    let organizerAddr = addressFromStringValue(value(organizer))
    
                    ScriptResult(
                     WriteSet([
                        DataEntry(auctionId + "_settle", true),
                        DataEntry(value(winner)   + "_bidder", removeFromList(getStringValue(this, value(winner) + "_bidder"), auctionId)),
                        DataEntry(organizer + "_organizer", removeFromList(getStringValue(this, organizer + "_organizer"), auctionId))
                    
                    ]),
                     TransferSet([ScriptTransfer(winnerAddr, lotAmount, lotAsset),
                                 ScriptTransfer(organizerAddr, secondPrice, priceAsset),
                                 ScriptTransfer(winnerAddr, deposit - secondPrice, priceAsset),
                                ScriptTransfer(winnerAddr, deposit - secondPrice, priceAsset)]))
                }
            }
        } else {
             
            if (settle == true) then throw("Illegal state, settle shoould be false") else {
                ScriptResult(
                     WriteSet([DataEntry(auctionId + "_settle", true),
                              DataEntry(callerAddressStr + "_bidder", removeFromList(getStringValue(this, callerAddressStr + "_bidder"), auctionId))
                     ]),
                     TransferSet([ScriptTransfer(i.caller, deposit, priceAsset)]))
            }
        }

    }
    
}